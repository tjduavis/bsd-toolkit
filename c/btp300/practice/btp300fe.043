        BTP300 --------------------------------------------- PAGE 1 of 4

        1. Determine the exact output of the following program.

            #include <iostream>     // alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZ
            using namespace std;    // A is 65 (41 hex) a is 97 (61 hex)

            enum visibility { kantc = 0, kanc };

            class showable {
                public:
                    virtual void output(ostream &) const = 0;
            };

            ostream &operator<<(ostream &os, const showable &s)
              { s.output(os); return os; }

            class hideable: virtual public showable {
                bool viz;
              public:
                hideable(bool v = bool(kanc)):viz(v) {}
                virtual void output1(ostream &os) const
                 { if (viz) output(os); }
                hideable &toggle() { viz = !viz; return *this;}
            };

            ostream &operator<<(ostream &os, const hideable &s)
              { s.output1(os); return os; }

            class decode: virtual public showable {
                char s[30];
              public:
                decode(const char str[] = "dog") { 
                    int i = 0;
                    for (i = 0; str[i]; i++)
                        s[i] = str[i] | 2;
                    s[i] = '\0'; 
                }
                void output(ostream &os) const { os << s; }
            };

            class foobar: public decode, public hideable {
              public:
                foobar(const char str[]="cat"): decode(str), hideable(kantc)
                 {}
            };

            int main ()
            {
                foobar f1, f2("Poai");
                cout << f1 << " Hard " << f2.toggle() << '\n';
                return 0;
            }






        OO Software Development - C++ ---------------- Final Examination
        BTP300 --------------------------------------------- PAGE 2 of 4

        2. Determine the exact output of the following program.

            #include <iostream>
            using namespace std;
            #include <stdio.h>
            #include <string.h>
            #define SZ 5

            template <class yabadaba>
            class bunch {
                yabadaba doo[SZ];
              public:
                bunch() { for (int i = 0; i < SZ; i++) doo[i] = 0; }
                yabadaba &operator[](unsigned int i) 
                 { return doo[i < SZ ? i : SZ - 1]; }
            };
            template <class X>
            ostream &operator<<(ostream &os, bunch<X> x)
            {   for (int i = 0; i < SZ; i++)
                    os << x[i] << (i < SZ - 1 ? ", " : "\n");
                return os;
            }
            template <class X>
            bunch<X> operator<<(bunch<X> x, int i)
            {   bunch<X> rc;
                for (int j = 0; j < SZ - i; j++)
                    rc[j] = x[j + i];
                return rc;
            }
            template <class X>
            bunch<X> operator>>(bunch<X> x, int i)
            {   bunch<X> rc;
                for (int j = i; j < SZ; j++)
                    rc[j] = x[j - i];
                return rc;
            }
            class foobar {
                char s[20];
              public:
                foobar(int i = 0) { if (i == 0) s[0] = '\0';
                                    else sprintf(s, "%d", i); }
                foobar(const char str[]) { strcpy(s, str); }
                friend ostream &operator<<(ostream &os, const foobar &f)
                  { return os << "<" << f.s << ">"; }
            };
            int main()
            {   bunch<int> one;
                bunch<foobar> two;
                for (int i = 0; i < SZ; i++) {
                    one[i] = i;
                    two[i] = i;
                }
                cout << (one << 2) << '\n' << (two >> 1) << '\n';
                return 0;
            }


        OO Software Development - C++ ---------------- Final Examination
        BTP300 --------------------------------------------- PAGE 3 of 4

        3. Write the template for a class (and templates for its member
           functions), filefilter<RECTYPE>, which is used to read
           selected records (of type RECTYPE) from a fixed-length record
           binary file. RECTYPE can be any data type which has a default
           constructor, has a working copy constructor and = operator,
           and occupies a contiguous block of memory which is the same
           size that sizeof reports.

           When instantiated, a filefilter<RECTYPE> is passed the name
           of the file to be read, and optionally, the address of a
           function which is passed an instance of RECTYPE and returns
           bool.

           A filefilter<RECTYPE> has the following member functions:

                RECTYPE read() - returns the next record which, when
                  passed to the function supplied at instantiation,
                  results in a true value. If no such record is found, a
                  default RECTYPE is returned. If no function address
                  (or a NULL address) was supplied at instantiation,
                  then the next record (if there is one) is returned.

                bool eof() - returns true if the last read() returned a
                  default RECTYPE because end of file had been reached.

                void rewind() - resets the file so that the next read()
                  will start at the beginning of the file.

           For example, if a file "abc" contains the five integers 3,
           10, -4, 200, 30 stored in binary format, then

                bool q3filter(int x) { return 5 < x && x < 50; }

                int main() {
                    filefilter<int> f("abc", q3filter);
                    int n = f.read();
                    while (!f.eof()) {
                        cout << n << ' ';
                        n = f.read();
                    }
                    cout << '\n';
                }

            outputs:

                10 30











        OO Software Development - C++ ---------------- Final Examination
        BTP300 --------------------------------------------- PAGE 4 of 4

        4. As you may recall, bigendian computers store high order bytes
           before low order bytes in memory (so 0x44332211 is stored in
           the order 0x44 0x33 0x22 0x11, assuming a 4-byte integer)
           while little-endian computers store low order bytes before
           high order bytes (so 0x44332211 is stored in the order 0x11
           0x22 0x33 0x44).

           Write two functions

                unsigned int bigendian(unsigned int)

           and

                unsigned int littlendian(unsigned int)

           which returns a copy of the int passed possibly rearranged so
           that if a memory image of the result was stored or
           transmitted for later access on a bigendian or little-endian,
           respectively, computer, the other machine would be able to
           read it properly.

           For example, on a little-endian, 32-bit machine

                bigendian(0x1234) returns 0x34120000

           and

                littlendian(0x1234) returns 0x1234

           while on a bigendian, 32-bit machine, the results would be
           reversed.

           Your answer should not assume a particular word size, but it
           may assume that bigendian and little-endian are the only
           possible choices.

           Hint: Store a known value in memory, and then look at it as
           an array of bytes. This gives you a way to tell if the
           machine itself is bigendian or little-endian, so you'll know
           which of the two functions has to reverse the order of the
           bytes.














