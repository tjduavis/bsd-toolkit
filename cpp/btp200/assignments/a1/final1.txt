Script command is started on Sun Feb  6 23:52:32 EST 2005.$ whoami
tjduavis
$ cat /public/btp200   100/oath.txt

Student Assignment Submission Form
==================================
I declare that the attached assignment is my own work in 
accordance with Seneca Academic Policy.  No part of this 
assignment has been copied manually or electronically 
from any other source (including web sites) or 
distributed to other students.


Name                                          Student ID

---------------------------------------------------------




Signature


------------------------------
$ cat Datase  Sw et.h
/*
* Assignment 1 - v.1.01
* DataSet.h
*        Purpose: - to design, code and test a class for data set objects that
*                           performs a linear regression analyses on those objects.
*                         - header file, for DataSet.cpp: including prototypes,libraries
*                           and macros.
*    Author: Timothy Duavis
*    Last Modified: Feb 06/05
*/

#include <new>
#include <math.h>
#include <cstdio>
#include <string.h>

#define SQUARE 2                //exponent 2, for getting the square of numbers

//holds information for single data point
class DataPoint{
        double abscissa;
        double ordinate;

        public:
                int loadFromFile(FILE* fp);
                double getx() const;
                double gety() const;
};

//objects holds the info for set of data points
class DataSet{
        int numDataPts;
        char labelFile[40];
        DataPoint* Pts;
        //variables for graphical functional relationships
        int j;
        double slopeValue;
        double interceptValue;
        double meanX, meanY;
        double sumSqrsX, sumSqrsY;
        double devtnX, devtnY;
        double correlationValue;

        //calc modifiers
        double calc_slope();
        double calc_intercept();
        double calc_correlation();

        public:
                bool loadFromFile(const char* filename);

                //clean up
                void closeUp();

                //queries
                const char* label() const;
                double slope() const;
                double intercept() const;
                double correlation() const;
                int nPoints() const;
                DataPoint point(int i) const;
};
$ cat DataSet.cpp
/*
* Assignment 1 - v.1.01
* DataSet.cpp
*        Purpose: - to design, code and test a class for data set objects that
*                           performs a linear regression analyses on those objects.
*                       (source: cs/~btp website - Assignment 1 outline)
*    Author: Timothy Duavis
*    Last Modified: Feb 06/05
*/

#include "DataSet.h"

//DataPoint Class Definitions
//-----------------------------------------------//
/*
* loadFromFile - function
*       Purpose:Reads the abscissa and ordinate from the file pointed
*                       to by fp and returns the number of values successfully read
*                       from the file.  Your function, if it encounters an end of file
*                       mark, returns EOF.
*                       (source: cs/~btp website - Assignment 1 outline)
*/
int DataPoint::loadFromFile(FILE* fp){
        int check;

        if(fp!=NULL){
                check=fscanf(fp,"%lf %lf",&abscissa, &ordinate);
        }
        else
                check=EOF;
        return check;
}

/*
* getx - function
*       Purpose:Is a query that returns the abscissa.
*                   (source: cs/~btp website - Assignment 1 outline)
*/
double DataPoint::getx() const{
        return abscissa;
}

/*
* gety - function
*       Purpose:Is a query that returns the ordinate.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
double DataPoint::gety() const{
        return ordinate;
}

//DataSet Class
//------------------------------------------------//
//Priviate Definitions: Modifiers
/*
* calc_slope - function
*       Purpose:Calculates slope and returns double to private DataSet Class
*/
double DataSet::calc_slope(){
        double numerator=0, denominator=0;
        //Private variables initialized
        meanX=0;
        meanY=0;

        for (j=0; j<numDataPts; j++){
                meanX += Pts[j].getx();
                meanY += Pts[j].gety();
        }
        meanX /= (numDataPts);
        meanY /= (numDataPts);
        for (j=0; j<numDataPts; j++){
                numerator += (Pts[j].getx() - meanX)*(Pts[j].gety()-meanY);
                denominator += pow((Pts[j].getx()-meanX),SQUARE);
        }
        return (slopeValue = numerator / denominator);
}

/*
* calc_intercept - function
*       Purpose:Calculates intercept and returns double to private DataSet Class
*/
double DataSet::calc_intercept(){
        return ( interceptValue = meanY - (slope() * meanX) );
}

/*
* calc_correlation - function
*       Purpose:Calculates correlation and returns double to private DataSet Class
*/
double DataSet::calc_correlation(){
        double rootedX, rootedY;
        double numerator=0, denominator=0;

        //Private variables initialized
        sumSqrsX = 0;
        sumSqrsY = 0;

        for (j=0; j<numDataPts; j++){
                sumSqrsX += pow(Pts[j].getx(),SQUARE);
                sumSqrsY += pow(Pts[j].gety(),SQUARE);
        }

        rootedX = (sumSqrsX / numDataPts) - pow(meanX,SQUARE);
        rootedY = (sumSqrsY / numDataPts) - pow(meanY,SQUARE);

        devtnX = sqrt(rootedX);
        devtnY = sqrt(rootedY);

        for (j=0; j<numDataPts; j++)
                numerator += Pts[j].getx()*Pts[j].gety();

        numerator /= numDataPts;
        numerator -= (meanX*meanY);

        return ( correlationValue = numerator / (devtnX*devtnY) );
}

//Public Definitions: Modifiers
/*
* loadFromFile - function
*       Purpose:receives the name of a file in a null-terminated C-style string.
*                       The file contains the data points in the set, one abscissa and
*                       corresponding ordinate per record.  Function attempts to open the
*                       file and returns true if successful; false otherwise.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
bool DataSet::loadFromFile(const char* filename){
        bool success = false;
        int numLines = 0, quit=0, check;
        FILE* DataFile = NULL;

        //Private variables initialized
        Pts = NULL;
        numDataPts = 0;

        strcpy(labelFile,filename);

        DataFile = fopen(filename,"r");
        if (DataFile != NULL){
                //Reads Num. of Lines in file for class array
                do{
                        check=fgetc(DataFile);
                        if(check=='\n')
                                numLines+=1;
                }while(check!=EOF);
                //Adds 1,since EOF considering end of sentence as new line
                numLines+=1;
                //reset file to read from begginning
                rewind(DataFile);

                //Creates Instance for DataPoint with numLines amount of space
                Pts = new DataPoint [numLines];
                //number of lines Read successfully
                for(int i=0; quit==0; i++){
                        int goodValue = Pts[i].loadFromFile(DataFile);
                        if(goodValue==EOF)
                                quit=1;
                        else if(goodValue==2){
                                goodValue/=2;
                                numDataPts+=goodValue;
                        }
                }

                if(numDataPts!=0){
                        //Call private functions that does the calculations
                        slopeValue=calc_slope();
                        interceptValue=calc_intercept();
                        correlationValue=calc_correlation();
                        success = true;
                }
                else if(numDataPts==0){
                        //Set calculatedValue to 0, if there are no files
                        slopeValue=0;
                        interceptValue=0;
                        correlationValue=0;
                }
                //Close file
                fclose(DataFile);
        }
        return success;
}

/*
* closeUp - function
*       Purpose:Is a modifier that cleans up before the object goes out of scope.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
void DataSet::closeUp(){
        delete [] Pts;
}

//Public Defintions: Queries
/*
* point - function
*       Purpose:Is a query that returns data point i of the data set.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
DataPoint DataSet::point(int i) const{
        return Pts[i];
}

/*
* label - function
*       Purpose:Is a query that returns the label of the data set.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
const char* DataSet::label() const{
        return labelFile;
}

/*
* nPoint - function
*       Purpose:Is a query that returns the number of data points in the data set.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
int DataSet::nPoints() const{
        return numDataPts;
}

/*
* slope - function
*       Purpose:Is a query that returns the slope of the least-squares line
*                       that fits the data points; 0 if there are no data points
*                       in the data set.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
double DataSet::slope() const{
        return slopeValue;
}

/*
* intercept - function
*       Purpose:Is a query that returns the intercept of the least-squares line
*                       that fits the data points; 0 if there are no data points
*                       in the data set.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
double DataSet::intercept() const{
        return interceptValue;
}

/*
* correlation - function
*       Purpose:Is a query that returns the coefficient that describes the correlation
*                       between the abscissas and the ordinates of the data set; 0 if there are
*                       no data points in the data set.
*                  (source: cs/~btp website - Assignment 1 outline)
*/
double DataSet::correlation() const{
        return correlationValue;
}$ c++ a1test.cpp DataSet.cpp
a1test.cpp:
DataSet.cpp:
$ a.out
DataPoint Tests passed!
DataSet Tests passed!

Your DatSet module has passed 68 of 68 tests

Congratulations!!!   Your DataSet module is ready for submission

$ c++ regression..c  pp  cpp DataSet.cpp -o regression
regression.cpp:
DataSet.cpp:
$ regression
Regression analysis (x on y)
============================

Choose one of the following options:
 1 Load a data set from file
 2 Display statistics for all data sets
 0 Quit
Your selection : 1

Enter filename : paleo.dat

Choose one of the following options:
 1 Load a data set from file
 2 Display statistics for all data sets
 0 Quit
Your selection : 1

Enter filename : stopDist.dat

Choose one of the following options:
 1 Load a data set from file
 2 Display statistics for all data sets
 0 Quit
Your selection : 2

Data Set Label           Slope Intercept Correlation
paleo.dat                 0.64      2.51      0.88
stopDist.dat              0.26     26.94      0.91

Choose one of the following options:
 1 Load a data set from file
 2 Display statistics for all data sets
 0 Quit
Your selection : 0

Have a nice day!
$ exit

Script command is complete on Sun Feb  6 23:54:19 EST 2005.