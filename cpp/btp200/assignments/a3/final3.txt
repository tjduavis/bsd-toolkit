Script command is started on Mon Feb 28 16:08:59 EST 2005.$ whoami
tjduavis
$ cat /public/btp200/oath.txt

Student Assignment Submission Form
==================================
I declare that the attached assignment is my own work in 
accordance with Seneca Academic Policy.  No part of this 
assignment has been copied manually or electronically 
from any other source (including web sites) or 
distributed to other students.


Name                                          Student ID

---------------------------------------------------------




Signature


------------------------------
$ cat DataSet.h
/***************************************************************************/
/* Assignment 3 - Draft version                                            */
/* DataSet.h                                                               */                          
/*       Purpose: - to design, code and test a class for data set objects  */
/*                  that performs a linear regression analyses on those    */
/*                  objects. Including outliners analysis                  */
/*            - upgrade version include the concatenation of two           */
/*                              data sets.                                 */                                                             
/*            - header file, for DataSet.cpp: including prototypes,        */
/*              libraries and macros.                                      */
/*                                                                         */
/*    Author: Timothy Duavis                                               */
/*    Last Modified: Feb 27/05                                             */
/***************************************************************************/

//Library*******************************************************************/
#include <new>
#include <cmath>
#include <cstring>
#include<iostream>
#include <iomanip>
using namespace std;

#define SQUARE 2        //exponent 2, for getting the square of numbers
#define INCLUDED 1      //include all pts (even outliners) in calc
#define EXCLUDED 2      //exclude outliners pts in calc

//Class DataPoint***********************************************************/
class DataPoint{
        double abscissa;
        double ordinate;
        int outliner;

        public:
                //modifiers**********************************/
                DataPoint();

                int loadFromFile(FILE* fp);
                bool saveToFile(FILE* fp);

                void appendx(double);
                void appendy(double);
                int SetOutliner(int);

                friend bool operator==(const DataPoint&, const DataPoint&);
                //queries************************************/
                double getx() const;
                double gety() const;
                int DisplayOutliner() const;
};

//Class DataSet*************************************************************/
class DataSet{
        int numDataPts;

        char* labelFile;
        DataPoint* Pts;

        int j;
        double slopeValue;
        double interceptValue;
        double meanX, meanY;
        double sumSqrsX, sumSqrsY;
        double devtnX, devtnY;
        double correlationValue;
        double devRatio;
        int numOutliner;

        //modifiers**********************************/
        double calc_slope();
        double calc_intercept();
        double calc_correlation();
        double chauvenet(int);

        public:
                //modifiers**********************************/
                DataSet();
                DataSet(const DataSet&);
                ~DataSet();

                bool saveToFile(const char* filename);
                bool loadFromFile(const char* filename);

                void copyClone(const DataSet&);
                void include();
                void include(double tolerance);

                friend bool operator==(const DataSet&, const DataSet&);
                DataSet& operator=(const DataSet&);
                friend DataSet operator+(const DataSet&, const DataSet&);
                friend ostream& operator<<(ostream&, const DataSet&);

                //queries************************************/
                const char* label() const;
                double slope() const;
                double intercept() const;
                double correlation() const;
                int nPoints() const;
                DataPoint point(int i) const;
                bool outlier(int) const;
                int outlier() const;
                void display() const;
};
$ cat DataSet.cpp
/***************************************************************************/
/* Assignment 3 - Draft version                                            */
/* DataSet.cpp                                                             */
/*       Purpose: - to design, code and test a class for data set objects  */
/*                  that performs a linear regression analyses on those    */
/*                  objects. Including outliners analysis                  */
/*            - upgrade version include the concatenation of two data sets.*/                                                                       
/*                                                                         */
/*    Author: Timothy Duavis                                               */
/*    Last Modified: Feb 27/05                                             */
/***************************************************************************/

//Library*******************************************************************/
#include "DataSet.h"

//**********************DataPoint Class Definitions*************************/
//Public: Modifiers*********************************************************/
/*--------------------------------------------------------*/
/* DataPoint() - Constructor                              */
/*      purpose: Initialize private variables             */
/*--------------------------------------------------------*/
DataPoint::DataPoint(){
        abscissa = 0.00;
        ordinate = 0.00;
        outliner = 0;
}

/*--------------------------------------------------------*/
/* loadFromFile - function                                */
/*      Purpose:Reads the abscissa and ordinate from file */
/*          pointed by fp. returns successful values read,*/
/*          EOF if not. if readed values are incorrect,   */
/*          abscissa and ordinate set to 0.               */
/*--------------------------------------------------------*/
int DataPoint::loadFromFile(FILE* fp){
        int check;

        if(fp!=NULL){
                check=fscanf(fp,"%lf %lf",&abscissa, &ordinate);
                if(check!=2 && check!=-1){
                        abscissa = 0;
                        ordinate = 0;
                }
        } else
                check=EOF;

        return check;
}

/*--------------------------------------------------------*/
/* saveToFile(FILE* fp) - Modifier                        */
/*      purpose: saves abscissa and ordinate values of to */
/*               to file with '\n' as terminator          */
/*--------------------------------------------------------*/
bool DataPoint::saveToFile(FILE* fp){
        bool ok;
        int check;

        if(fp!=NULL){
                check=fprintf(fp,"%10.2lf %10.2lf\n",abscissa, ordinate);

                if(check!=EOF)
                        ok = true;
                else
                        ok = false;

        } else
                ok = false;

        return ok;
}

/*--------------------------------------------------------*/
/* SetOutliner(int i) - Modifier                          */
/*      purpose: sets outliner value to be included (0) or*/
/*                       excluded (1).                    */
/*--------------------------------------------------------*/
int DataPoint::SetOutliner(int i){
        switch(i){
                case INCLUDED:
                        outliner = 0;
                        break;
                case EXCLUDED:
                        outliner = 1;
                        break;
        }

        return outliner;
}

/*--------------------------------------------------------*/
/* appendx(int) - modifier                                */
/*      purpose: append x value                           */
/*--------------------------------------------------------*/
void DataPoint::appendx(double Xvalue) {
        abscissa = Xvalue;
}

/*--------------------------------------------------------*/
/* appendy(int) - modifier                                */
/*      purpose: append y value                           */
/*--------------------------------------------------------*/
void DataPoint::appendy(double Yvalue) {
        ordinate = Yvalue;
}

/*--------------------------------------------------------*/
/* == - Operator function                                 */
/*      purpose: if 2 instance of class are equal return  */
/*               true otherwise false.                    */
/*--------------------------------------------------------*/
bool operator==(const DataPoint& PtA, const DataPoint& PtB){
        bool equal = false;

        if (PtA.abscissa == PtB.abscissa && PtA.ordinate == PtB.ordinate)
                equal = true;

        return equal;
}

//Public: Queries***********************************************************/
/*--------------------------------------------------------*/
/* DisplayOutliner - Querie                               */
/*      purpose: displays outliner value                  */
/*--------------------------------------------------------*/
int DataPoint::DisplayOutliner() const{
        return outliner;
}

/*--------------------------------------------------------*/
/* getx - function                                        */
/*      purpose:Query that returns the abscissa.          */
/*--------------------------------------------------------*/
double DataPoint::getx() const{
        return abscissa;
}

/*--------------------------------------------------------*/
/* gety - function                                        */
/*      Purpose:Query that returns the ordinate.          */
/*--------------------------------------------------------*/
double DataPoint::gety() const{
        return ordinate;
}

//**********************DataSet Class Definitions***************************/
//Private Definitions: Modifiers********************************************/
/*--------------------------------------------------------*/
/* calc_slope - function                                  */
/*      purpose:Calculates slope and returns double to    */
/*          private DataSet Class.                        */
/*--------------------------------------------------------*/
double DataSet::calc_slope(){
        int excluded=0;
        double numerator=0, denominator=0;

        //initialize
        meanX=0;
        meanY=0;

        for (j=0; j<numDataPts; j++){
                //outliner excluded
                if(Pts[j].DisplayOutliner()==0){
                        meanX += Pts[j].getx();
                        meanY += Pts[j].gety();
                } else {
                        //number of excluded points
                        ++excluded;
                }
        }

        meanX /= (numDataPts - excluded);
        meanY /= (numDataPts - excluded);

        for (j=0; j<numDataPts; j++){
                //outliner excluded
                if(Pts[j].DisplayOutliner()==0){
                        numerator += (Pts[j].getx() - meanX)*(Pts[j].gety()-meanY);
                        denominator += pow((Pts[j].getx()-meanX),SQUARE);
                }
        }

        if(denominator==0)
                slopeValue=0;
        else
                slopeValue = numerator / denominator;

        return slopeValue;
}

/*--------------------------------------------------------*/
/* calc_intercept - function                              */
/*      Purpose:Calculates intercept and returns double to*/
/*          private DataSet Class.                        */
/*--------------------------------------------------------*/
double DataSet::calc_intercept(){
        return ( interceptValue = meanY - (slope() * meanX) );
}

/*--------------------------------------------------------*/
/* calc_correlation - function                            */
/*      Purpose:Calculates correlation and returns double */
/*          to private DataSet Class.                     */
/*--------------------------------------------------------*/
double DataSet::calc_correlation(){
        int excluded;
        double rootedX, rootedY;
        double numerator;

        //initialize
        numerator = 0;
        excluded = 0;
        sumSqrsX = 0;
        sumSqrsY = 0;

        for (j=0; j<numDataPts; j++){
                //outliner excluded
                if(Pts[j].DisplayOutliner()==0){
                        sumSqrsX += pow(Pts[j].getx(),SQUARE);
                        sumSqrsY += pow(Pts[j].gety(),SQUARE);
                } else {
                        //number of excluded points
                        excluded++;
                }
        }

        rootedX = (sumSqrsX / (numDataPts-excluded)) - pow(meanX,SQUARE);
        rootedY = (sumSqrsY / (numDataPts-excluded)) - pow(meanY,SQUARE);

        devtnX = sqrt(rootedX);
        devtnY = sqrt(rootedY);

        //reset excluded
        excluded=0;
        for (j=0; j<numDataPts; j++){
                //outliner excluded
                if(Pts[j].DisplayOutliner()==0)
                        numerator += Pts[j].getx()*Pts[j].gety();
                else{
                        //number of excluded points
                        ++excluded;
                }
        }

        numerator /= (numDataPts - excluded);
        numerator -= (meanX*meanY);

        correlationValue = numerator / (devtnX*devtnY);

        return correlationValue;
}
//Public Definitions: Modifiers*********************************************/
/*--------------------------------------------------------*/
/* DataSet() - Constructor                                */
/*      purpose: Initialize private variables             */
/*--------------------------------------------------------*/
DataSet::DataSet(){
        numDataPts = 0;

        labelFile = NULL;
        Pts = NULL;

        j = 0;
        slopeValue = 0.0;
        interceptValue = 0.0;
        meanX = 0.0;
        meanY = 0.0;
        sumSqrsX = 0.0;
        sumSqrsY = 0.0;
        devtnX = 0.0;
        devtnY = 0.0;
        correlationValue = 0.0;
        devRatio = 0.0;
        numOutliner = 0;
}

/*--------------------------------------------------------*/
/* DataSet(const DataSet&) - Copy Constructor             */
/*      purpose: copy constructor for deep copying        */
/*--------------------------------------------------------*/
DataSet::DataSet(const DataSet& toCopied) {
        copyClone(toCopied);
}

/*--------------------------------------------------------*/
/* ~DataSet() - Deconstructor                             */
/*      purpose: deallocates dynamic memory Pts           */
/*--------------------------------------------------------*/
DataSet::~DataSet() {
        if (Pts) delete [] Pts;
        if (labelFile) delete [] labelFile;
}

/*--------------------------------------------------------*/
/* copyClone - modifier                                   */
/*      purpose: copy function for copy constructor and   */
/*                               assignment operator      */
/*--------------------------------------------------------*/
void DataSet::copyClone(const DataSet& cpySource) {
        if(cpySource.labelFile!=NULL) {
                labelFile = new char [strlen(cpySource.labelFile)+1];
                strcpy(labelFile,cpySource.labelFile);
        } else
                labelFile = NULL;

        Pts = new DataPoint [cpySource.numDataPts];

        for(j=0; j<cpySource.numDataPts; j++) {
                Pts[j].appendx(cpySource.Pts[j].getx());
                Pts[j].appendy(cpySource.Pts[j].gety());
        }

        numDataPts = cpySource.numDataPts;
        j = cpySource.j;
        slopeValue = cpySource.slopeValue;
        interceptValue = cpySource.interceptValue;
        meanX = cpySource.meanX;
        meanY = cpySource.meanY;
        sumSqrsX = cpySource.sumSqrsX;
        devtnX = cpySource.devtnX;
        devtnY = cpySource.devtnY;
        correlationValue = cpySource.correlationValue;
        devRatio = cpySource.devRatio;
        numOutliner = cpySource.numOutliner;
}

/*--------------------------------------------------------*/
/* loadFromFile - function                                */
/*      Purpose:opens null-terminated from user, and makes*/
/*              a copy. file contains data points in set, */
/*              copies data points (one abscissa and      */
/*              ordinate)                                 */
/*--------------------------------------------------------*/
bool DataSet::loadFromFile(const char* filename){
        bool success = false;
        int numLines = 0, quit=0, check;
        FILE* DataFile = NULL;

        //Private variables initialized
        Pts = NULL;
        numDataPts = 0;

        labelFile = new char [strlen(filename)+1];
        strcpy(labelFile,filename);

        DataFile = fopen(filename,"r");
        if (DataFile != NULL){
                //Reads Num. of Lines in file for class array
                do{
                        check=fgetc(DataFile);
                        if(check=='\n')
                                numLines+=1;
                }while(check!=EOF);
                //Adds 1,since EOF considering end of sentence as new line
                numLines+=1;
                //reset file to read from begginning
                rewind(DataFile);

                //Creates Instance for DataPoint with numLines amount of space
                Pts = new DataPoint [numLines];
                //number of lines Read successfully
                for(int i=0; quit==0; i++){
                        int goodValue = Pts[i].loadFromFile(DataFile);
                        if(goodValue==EOF)
                                quit=1;
                        else if(goodValue==2){
                                goodValue/=2;
                                numDataPts+=goodValue;
                        }
                }

                if(numDataPts!=0){
                        //Call private functions that does the calculations
                        slopeValue=calc_slope();
                        interceptValue=calc_intercept();
                        correlationValue=calc_correlation();
                        success = true;
                }
                else if(numDataPts==0){
                        //Set calculatedValue to 0, if there are no files
                        slopeValue=0;
                        interceptValue=0;
                        correlationValue=0;
                }
                //Close file
                fclose(DataFile);
        }

        return success;
}

/*--------------------------------------------------------*/
/* saveToFile(const char* filename) - function            */
/*      Purpose:opens null-terminated from user, and makes*/
/*              a copy. file contains data points in set, */
/*              copies data points (one abscissa and      */
/*              ordinate)                                 */
/*--------------------------------------------------------*/
bool DataSet::saveToFile(const char* filename) {
        bool ok = true;
        FILE* DataFile = NULL;

        if (filename!=NULL) {
                labelFile = new char [strlen(filename)+1];
                strcpy(labelFile,filename);

                DataFile = fopen(filename,"w");
                if (DataFile!=NULL) {
                        for (j=0; j<numDataPts; j++) {
                                ok = Pts[j].saveToFile(DataFile);
                                if (ok == false)
                                        j = numDataPts;
                        }

                        fclose(DataFile);
                } else
                        ok = false;
        } else
                ok = false;

        return ok;
}

/*--------------------------------------------------------*/
/* include() - function                                   */
/*      purpose: sets outliner mask for all pts to be     */
/*           included in calc                             */
/*--------------------------------------------------------*/
void DataSet::include(){
        for(j=0; j<numDataPts; j++)
                Pts[j].SetOutliner(INCLUDED);
        slopeValue=calc_slope();
        interceptValue=calc_intercept();
        correlationValue=calc_correlation();
}

/*--------------------------------------------------------*/
/* include(double) - function                             */
/*      purpose: sets outliner mask for pts to be excluded*/
/*               in calc.                                 */
/*--------------------------------------------------------*/
void DataSet::include(double tolerance){
        numOutliner = 0;

        for(j=0; j<numDataPts; j++){
                devRatio = chauvenet(j);

                if (devRatio > tolerance){
                        Pts[j].SetOutliner(EXCLUDED);
                        ++numOutliner;
                }
        }

        slopeValue=calc_slope();
        interceptValue=calc_intercept();
        correlationValue=calc_correlation();
}

/*--------------------------------------------------------*/
/* outliner(int) - function                               */
/*      purpose: true if pt is outliner, otherwise falser */
/*--------------------------------------------------------*/
bool DataSet::outlier(int xy) const{
        bool good=false;

        if(xy < 0 || xy >= numDataPts)
                good = true;
        else if (Pts[xy].DisplayOutliner()==1)
                good=true;

        return good;
}

/*--------------------------------------------------------*/
/* outliner() - function                                  */
/*      purpose: returns number of outliners              */
/*--------------------------------------------------------*/
int DataSet::outlier() const{
        return numOutliner;
}

/*--------------------------------------------------------*/
/* chauvenet(int i) - function                            */
/*      purpose: to identify the outliners                */
/*--------------------------------------------------------*/
double DataSet::chauvenet(int i){
        double final = (Pts[i].gety() - meanY) / devtnY;

        if (final < 0)
                final *= -1;

        return final;
}

/*--------------------------------------------------------*/
/* operator== - helper                                    */
/*      purpose: compares 2 DataSet class for equivalents */
/*--------------------------------------------------------*/
bool operator==(const DataSet& SetA, const DataSet& SetB){
        bool good;

        if(SetA.numDataPts == SetB.numDataPts){
                good=true;
                for(int j=0; j<SetA.numDataPts || good==false; j++){
                        if(SetA.Pts[j].getx() != SetB.Pts[j].getx() && SetA.Pts[j].gety() != SetB.Pts[j].gety())
                                good = false;
                }
        } else
                good = false;

        return good;
}

/*--------------------------------------------------------*/
/* operator= - helper                                     */
/*      purpose: deep copy                                */
/*--------------------------------------------------------*/
DataSet& DataSet::operator=(const DataSet& source) {
        if (this != &source) {
                if (Pts) delete [] Pts;
                if (labelFile) delete [] labelFile;
                copyClone(source);
        }

        return *this;
}

/*--------------------------------------------------------*/
/* operator+ - helper                                     */
/*      purpose: deep copy                                */
/*--------------------------------------------------------*/
DataSet operator+(const DataSet& left, const DataSet& right) {
        DataSet LplusR;
        int i,k;

        LplusR.numDataPts = left.numDataPts + right.numDataPts;
        LplusR.Pts = new DataPoint [LplusR.numDataPts];

        //create new modifier for DataPoint
        for (i=0; i<left.numDataPts; i++) {
                LplusR.Pts[i].appendx(left.Pts[i].getx());
                LplusR.Pts[i].appendy(left.Pts[i].gety());
        }
        for (k=0; k<right.numDataPts; k++) {
                LplusR.Pts[i].appendx(right.Pts[k].getx());
                LplusR.Pts[i].appendy(right.Pts[k].gety());
                i++;
        }

        if(LplusR.numDataPts!=0){
                //Call private functions that does the calculations
                LplusR.slopeValue=LplusR.calc_slope();
                LplusR.interceptValue=LplusR.calc_intercept();
                LplusR.correlationValue=LplusR.calc_correlation();
        } else if(LplusR.numDataPts==0){
                //Set calculatedValue to 0, if there are no files
                LplusR.slopeValue=0;
                LplusR.interceptValue=0;
                LplusR.correlationValue=0;
        }

        return LplusR;
}

/*--------------------------------------------------------*/
/* operator<< - helper                                    */
/*      purpose: insertion operator for slope,intercept,  */
/*                               correlation and label values             */
/*--------------------------------------------------------*/
ostream& operator<<(ostream& OutDisplay, const DataSet& Values) {
        OutDisplay << right << setw(9) << setprecision(2) << Values.slopeValue
                           << setw(6) << right << fixed << setprecision(2) << Values.interceptValue
                           << setw(10) << right << fixed << setprecision(2) << Values.correlationValue
                           << setw(19) << Values.labelFile;

        return OutDisplay;
}

//Public Defintions: Queries********************************************/
/*--------------------------------------------------------*/
/* point - function                                       */
/*      purpose:query that returns data point i of        */
/*          the data set. pt is outliner returns empty    */
/*                      DataPoint.                        */
/*--------------------------------------------------------*/
DataPoint DataSet::point(int i) const{
        DataPoint emptyDataPoint;

        if(i < 0 || i >= numDataPts )
                return emptyDataPoint;
        else {
                if(Pts[i].DisplayOutliner()==1)
                        return emptyDataPoint;
                else
                        return Pts[i];
        }
}

/*--------------------------------------------------------*/
/* label - function                                       */
/*      purpose:query that returns the label of the       */
/*              data set.                                 */
/*--------------------------------------------------------*/
const char* DataSet::label() const{
        return labelFile;
}

/*--------------------------------------------------------*/
/* nPoint - function                                      */
/*      purpose:query that returns the number of data     */
/*              points in the data set.                   */
/*--------------------------------------------------------*/
int DataSet::nPoints() const{
        return numDataPts;
}

/*--------------------------------------------------------*/
/* slope - function                                       */
/*      purpose:query that returns the slope of line from */
/*              pts in data set; 0 if no pts.             */
/*--------------------------------------------------------*/
double DataSet::slope() const{
        return slopeValue;
}

/*--------------------------------------------------------*/
/* intercept - function                                   */
/*      purpose:query that returns the intercept of line  */
/*              from pts in data set; 0 if no pts.        */
/*--------------------------------------------------------*/
double DataSet::intercept() const{
        return interceptValue;
}

/*--------------------------------------------------------*/
/* correlation - function                                 */
/*      purpose:query that returns the correlation of line*/
/*              from pts in data set; 0 if no pts.        */
/*--------------------------------------------------------*/
double DataSet::correlation() const{
        return correlationValue;
}

/*--------------------------------------------------------*/
/* display() - function                                   */
/*      purpose: outputs values in a data set.            */
/*--------------------------------------------------------*/
void DataSet::display() const{
        cout << "Independent Value" << setw(17) << "Dependent Value" << endl;

        for(int x=0; x<numDataPts; x++){
                if (Pts[x].DisplayOutliner()==0)
                        cout << setw(17) << fixed << setfill(' ') << setprecision(2) << Pts[x].getx()
                         << setw(17) << fixed << setfill(' ') << setprecision(2) << Pts[x].gety()
                         << endl;
                else
                        cout << "outliner"
                             << setw(9) << fixed << setprecision(2)  << Pts[x].getx()
                             << setw(17) << fixed << setprecision(2)  << Pts[x].gety()
                             << endl;
        }
}
$ c++ a3test.cpp DataSet.cpp -o a3test
a3test.cpp:
DataSet.cpp:
ld: 0711-224 WARNING: Duplicate symbol: .strlenFPCc
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >& std::operator<<<char,std::char_traits<char>,int>(std::basic_ostream<char,std::char_traits<char> >&,const std::_Smanip<int>&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >& std::operator<<<std::char_traits<char> >(std::basic_ostream<char,std::char_traits<char> >&,const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::flush()
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::length(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::width() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::sentry::sentry(std::basic_ostream<char,std::char_traits<char> >&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool() const
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::flags() const
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::eof()
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::rdbuf() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::fill() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::sputc(char)
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::eq_int_type(const int&,const int&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::sputn(const char*,int)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::width(int)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::setstate(int,bool)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry()
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::getloc() const
ld: 0711-224 WARNING: Duplicate symbol: .const std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >& std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::~locale()
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator(std::basic_streambuf<char,std::char_traits<char> >*)
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::failed() const
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::id::operator unsigned long()
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat(const std::locale::facet**)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Save(std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >*)
ld: 0711-224 WARNING: Duplicate symbol: .std::bad_cast::bad_cast(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::facet::_Decref()
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::locale(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::rdstate() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::clear(int,bool)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::fail() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::pubsync()
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::good() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::tie() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::osfx()
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::pptr() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::epptr() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::_Pninc()
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::to_int_type(const char&)
ld: 0711-224 WARNING: Duplicate symbol: .std::bad_cast::~bad_cast()
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::exception(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::facet::_Incref()
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::id::id(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Tidy()
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::~exception()
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::facet::facet(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init(const std::_Locinfo&)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::facet::~facet()
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put()
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,const void*) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,long double) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,double) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,unsigned long) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,long) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,bool) const
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::what() const
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::_Doraise() const
ld: 0711-224 WARNING: Duplicate symbol: .std::bad_cast::_Doraise() const
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::exception(const std::exception&)
ld: 0711-224 WARNING: Duplicate symbol: .memcpyFPvPCvUl
ld: 0711-224 WARNING: Duplicate symbol: .const std::numpunct<char>& std::use_facet<std::numpunct<char> >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string()
ld: 0711-224 WARNING: Duplicate symbol: .char std::_Widen<char>(char,char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append(unsigned long,char)
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::truename() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string()
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::falsename() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size() const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep(std::ostreambuf_iterator<char,std::char_traits<char> >,char,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str() const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put(std::ostreambuf_iterator<char,std::char_traits<char> >,const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::allocator<char>::allocator()
ld: 0711-224 WARNING: Duplicate symbol: .std::_String_val<char,std::allocator<char> >::_String_val(std::allocator<char>)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy(bool)
ld: 0711-224 WARNING: Duplicate symbol: .std::allocator<char>::allocator(const std::allocator<char>&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&,unsigned long,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Nullstr()
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow(unsigned long,bool)
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::assign(char*,unsigned long,char)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .memsetFPviUl
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::assign(char&,const char&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase(unsigned long,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Refcnt(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .bool std::operator==<char,char>(const std::allocator<char>&,const std::allocator<char>&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity() const
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::copy(char*,const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Freeze()
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::move(char*,const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .memmoveFPvPCvUl
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::allocator<char>::max_size() const
ld: 0711-224 WARNING: Duplicate symbol: .char* std::allocator<char>::allocate<void>(unsigned long,const void*)
ld: 0711-224 WARNING: Duplicate symbol: .std::allocator<char>::deallocate(char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt(char*,char,int)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::precision() const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt(char*,char,int)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,const char*,unsigned long,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc(std::ostreambuf_iterator<char,std::char_traits<char> >,const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .memchrFPCviUl
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::decimal_point() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::grouping() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::thousands_sep() const
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::operator*()
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::operator=(char)
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::operator++()
ld: 0711-224 WARNING: Duplicate symbol: .char* std::_Allocate<char>(unsigned long,char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::_Getcat(const std::locale::facet**)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::numpunct<char> >::_Save(std::numpunct<char>*)
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::numpunct(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::numpunct<char> >::_Tidy()
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::_Init(const std::_Locinfo&)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Locinfo::_Getlconv() const
ld: 0711-224 WARNING: Duplicate symbol: .char* std::_Maklocstr<char>(const char*,char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Locinfo::_Getfalse() const
ld: 0711-224 WARNING: Duplicate symbol: .std::_Locinfo::_Gettrue() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::~numpunct()
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_decimal_point() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_thousands_sep() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_grouping() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_falsename() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_truename() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign(const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside(const char*)
ld: 0711-224 WARNING: Duplicate symbol: std::locale::facet::~facet()
ld: 0711-224 WARNING: Duplicate symbol: std::basic_ostream<char,std::char_traits<char> >& std::__fsm_tab____ls<std::char_traits<char> >(std::basic_ostream<char,std::char_traits<char> >&,const char*)
ld: 0711-224 WARNING: Duplicate symbol: std::exception::~exception()
ld: 0711-224 WARNING: Duplicate symbol: std::exception::what() const
ld: 0711-224 WARNING: Duplicate symbol: std::exception::_Doraise() const
ld: 0711-224 WARNING: Duplicate symbol: std::bad_cast::~bad_cast()
ld: 0711-224 WARNING: Duplicate symbol: std::bad_cast::_Doraise() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::~numpunct()
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_decimal_point() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_thousands_sep() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_grouping() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_falsename() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_truename() const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put()
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,const void*) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,long double) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,double) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,unsigned long) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,long) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,bool) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
ld: 0711-224 WARNING: Duplicate symbol: const std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >& std::_Psave__use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >(const std::locale&)__2
ld: 0711-224 WARNING: Duplicate symbol: const std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >& std::__3__use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: std::_Tidyfac<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Facsav
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::id
ld: 0711-224 WARNING: Duplicate symbol: const std::numpunct<char>& std::_Psave__use_facet<std::numpunct<char> >(const std::locale&)__2
ld: 0711-224 WARNING: Duplicate symbol: const std::numpunct<char>& std::__3__use_facet<std::numpunct<char> >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
ld: 0711-224 WARNING: Duplicate symbol: std::_Tidyfac<std::numpunct<char> >::_Facsav
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
$ a3test
DataPoint Tests passed!
DataSet Tests passed!

Your DatSet module has passed 329 of 329 tests

Congratulations!!!   Your DataSet module is ready for submission

$ c++ regressionF.cpp DataSet.cpp -o regressionF 
regressionF.cpp:
DataSet.cpp:
ld: 0711-224 WARNING: Duplicate symbol: .strlenFPCc
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::operator<<(double)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >& std::operator<<<std::char_traits<char> >(std::basic_ostream<char,std::char_traits<char> >&,const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >& std::endl<char,std::char_traits<char> >(std::basic_ostream<char,std::char_traits<char> >&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::operator<<(std::basic_ostream<char,std::char_traits<char> >&(*)(std::basic_ostream<char,std::char_traits<char> >&))
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::widen(char) const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::put(char)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::flush()
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::length(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::width() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::sentry::sentry(std::basic_ostream<char,std::char_traits<char> >&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool() const
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::flags() const
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::eof()
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::rdbuf() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::fill() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::sputc(char)
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::eq_int_type(const int&,const int&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::sputn(const char*,int)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::width(int)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::setstate(int,bool)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry()
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::getloc() const
ld: 0711-224 WARNING: Duplicate symbol: .const std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >& std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::~locale()
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator(std::basic_streambuf<char,std::char_traits<char> >*)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,double) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::failed() const
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::id::operator unsigned long()
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat(const std::locale::facet**)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Save(std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >*)
ld: 0711-224 WARNING: Duplicate symbol: .std::bad_cast::bad_cast(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::facet::_Decref()
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::locale(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::rdstate() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::clear(int,bool)
ld: 0711-224 WARNING: Duplicate symbol: .const std::ctype<char>& std::use_facet<std::ctype<char> >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::widen(char) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::fail() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::pubsync()
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::good() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ios<char,std::char_traits<char> >::tie() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_ostream<char,std::char_traits<char> >::osfx()
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::pptr() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::epptr() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_streambuf<char,std::char_traits<char> >::_Pninc()
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::to_int_type(const char&)
ld: 0711-224 WARNING: Duplicate symbol: .std::bad_cast::~bad_cast()
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::_Getcat(const std::locale::facet**)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::ctype<char> >::_Save(std::ctype<char>*)
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::exception(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::facet::_Incref()
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::id::id(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Tidy()
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::~exception()
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::ctype(const short*,bool,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::facet::facet(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init(const std::_Locinfo&)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::ctype<char> >::_Tidy()
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype_base::ctype_base(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::_Init(const std::_Locinfo&)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Locinfo::_Getctype() const
ld: 0711-224 WARNING: Duplicate symbol: .std::locale::facet::~facet()
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put()
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,const void*) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,long double) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,double) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,unsigned long) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,long) const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,bool) const
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::what() const
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::_Doraise() const
ld: 0711-224 WARNING: Duplicate symbol: .std::bad_cast::_Doraise() const
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype_base::~ctype_base()
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::~ctype()
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::do_tolower(char*,const char*) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::do_tolower(char) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::do_toupper(char*,const char*) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::do_toupper(char) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::do_widen(const char*,const char*,char*) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::do_widen(char) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::do_narrow(const char*,const char*,char,char*) const
ld: 0711-224 WARNING: Duplicate symbol: .std::ctype<char>::do_narrow(char,char) const
ld: 0711-224 WARNING: Duplicate symbol: .std::exception::exception(const std::exception&)
ld: 0711-224 WARNING: Duplicate symbol: .memcpyFPvPCvUl
ld: 0711-224 WARNING: Duplicate symbol: .const std::numpunct<char>& std::use_facet<std::numpunct<char> >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string()
ld: 0711-224 WARNING: Duplicate symbol: .char std::_Widen<char>(char,char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append(unsigned long,char)
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::truename() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string()
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::falsename() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size() const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep(std::ostreambuf_iterator<char,std::char_traits<char> >,char,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str() const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put(std::ostreambuf_iterator<char,std::char_traits<char> >,const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::allocator<char>::allocator()
ld: 0711-224 WARNING: Duplicate symbol: .std::_String_val<char,std::allocator<char> >::_String_val(std::allocator<char>)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy(bool)
ld: 0711-224 WARNING: Duplicate symbol: .std::allocator<char>::allocator(const std::allocator<char>&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&,unsigned long,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Nullstr()
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow(unsigned long,bool)
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::assign(char*,unsigned long,char)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .memsetFPviUl
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::assign(char&,const char&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase(unsigned long,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Refcnt(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .bool std::operator==<char,char>(const std::allocator<char>&,const std::allocator<char>&)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity() const
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::copy(char*,const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Freeze()
ld: 0711-224 WARNING: Duplicate symbol: .std::char_traits<char>::move(char*,const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .memmoveFPvPCvUl
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::allocator<char>::max_size() const
ld: 0711-224 WARNING: Duplicate symbol: .char* std::allocator<char>::allocate<void>(unsigned long,const void*)
ld: 0711-224 WARNING: Duplicate symbol: .std::allocator<char>::deallocate(char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt(char*,char,int)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::ios_base::precision() const
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt(char*,char,int)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,const char*,unsigned long,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc(std::ostreambuf_iterator<char,std::char_traits<char> >,const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .memchrFPCviUl
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::decimal_point() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::grouping() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::thousands_sep() const
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::operator*()
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::operator=(char)
ld: 0711-224 WARNING: Duplicate symbol: .std::ostreambuf_iterator<char,std::char_traits<char> >::operator++()
ld: 0711-224 WARNING: Duplicate symbol: .char* std::_Allocate<char>(unsigned long,char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::_Getcat(const std::locale::facet**)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::numpunct<char> >::_Save(std::numpunct<char>*)
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::numpunct(unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Tidyfac<std::numpunct<char> >::_Tidy()
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::_Init(const std::_Locinfo&)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Locinfo::_Getlconv() const
ld: 0711-224 WARNING: Duplicate symbol: .char* std::_Maklocstr<char>(const char*,char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::_Locinfo::_Getfalse() const
ld: 0711-224 WARNING: Duplicate symbol: .std::_Locinfo::_Gettrue() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::~numpunct()
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_decimal_point() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_thousands_sep() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_grouping() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_falsename() const
ld: 0711-224 WARNING: Duplicate symbol: .std::numpunct<char>::do_truename() const
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign(const char*)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign(const char*,unsigned long)
ld: 0711-224 WARNING: Duplicate symbol: .std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside(const char*)
ld: 0711-224 WARNING: Duplicate symbol: std::ctype_base::~ctype_base()
ld: 0711-224 WARNING: Duplicate symbol: std::locale::facet::~facet()
ld: 0711-224 WARNING: Duplicate symbol: std::exception::~exception()
ld: 0711-224 WARNING: Duplicate symbol: std::exception::what() const
ld: 0711-224 WARNING: Duplicate symbol: std::exception::_Doraise() const
ld: 0711-224 WARNING: Duplicate symbol: std::bad_cast::~bad_cast()
ld: 0711-224 WARNING: Duplicate symbol: std::bad_cast::_Doraise() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::~numpunct()
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_decimal_point() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_thousands_sep() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_grouping() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_falsename() const
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::do_truename() const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put()
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,const void*) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,long double) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,double) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,unsigned long) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,long) const
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char,std::char_traits<char> >,std::ios_base&,char,bool) const
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::~ctype()
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::do_tolower(char*,const char*) const
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::do_tolower(char) const
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::do_toupper(char*,const char*) const
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::do_toupper(char) const
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::do_widen(const char*,const char*,char*) const
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::do_widen(char) const
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::do_narrow(const char*,const char*,char,char*) const
ld: 0711-224 WARNING: Duplicate symbol: std::ctype<char>::do_narrow(char,char) const
ld: 0711-224 WARNING: Duplicate symbol: std::basic_ostream<char,std::char_traits<char> >& std::endl<char,std::char_traits<char> >(std::basic_ostream<char,std::char_traits<char> >&)
ld: 0711-224 WARNING: Duplicate symbol: std::basic_ostream<char,std::char_traits<char> >& std::__fsm_tab____ls<std::char_traits<char> >(std::basic_ostream<char,std::char_traits<char> >&,const char*)
ld: 0711-224 WARNING: Duplicate symbol: const std::ctype<char>& std::_Psave__use_facet<std::ctype<char> >(const std::locale&)__2
ld: 0711-224 WARNING: Duplicate symbol: const std::ctype<char>& std::__3__use_facet<std::ctype<char> >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
ld: 0711-224 WARNING: Duplicate symbol: const std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >& std::_Psave__use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >(const std::locale&)__2
ld: 0711-224 WARNING: Duplicate symbol: const std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >& std::__3__use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: std::_Tidyfac<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Facsav
ld: 0711-224 WARNING: Duplicate symbol: std::_Tidyfac<std::ctype<char> >::_Facsav
ld: 0711-224 WARNING: Duplicate symbol: std::numpunct<char>::id
ld: 0711-224 WARNING: Duplicate symbol: const std::numpunct<char>& std::_Psave__use_facet<std::numpunct<char> >(const std::locale&)__2
ld: 0711-224 WARNING: Duplicate symbol: const std::numpunct<char>& std::__3__use_facet<std::numpunct<char> >(const std::locale&)
ld: 0711-224 WARNING: Duplicate symbol: std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
ld: 0711-224 WARNING: Duplicate symbol: std::_Tidyfac<std::numpunct<char> >::_Facsav
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
$ regressionF
Regression Analysis (x on y)
============================

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 1

Enter filename : paleo_a.dat

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 1

Enter filename : paleo_b.dat

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 4

Enter filename to be displayed : paleo_a.dat
Independent Value  Dependent Value
             5.10             3.46
             4.60             6.53
            12.98            14.15
             7.90             5.32
            12.83            12.96
            16.41            13.08
             6.60             6.84
            10.00             9.12
             8.08            10.77
            15.67             9.25
             4.53             4.11
             6.44             6.94
            21.53            14.64
            12.82             9.36
            22.27            17.56
             4.93             6.21
            16.35            15.02
            13.41             8.51

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 4

Enter filename to be displayed : paleo_b.dat
Independent Value  Dependent Value
            15.07             9.45
             6.04             6.54

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 5

Enter filename a : paleo_a.dat
Enter filename b : paleo_b.dat
Enter filename for a + b : paleo_a_b.dat

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 4

Enter filename to be displayed : paleo_a_b.dat
Independent Value  Dependent Value
             5.10             3.46
             4.60             6.53
            12.98            14.15
             7.90             5.32
            12.83            12.96
            16.41            13.08
             6.60             6.84
            10.00             9.12
             8.08            10.77
            15.67             9.25
             4.53             4.11
             6.44             6.94
            21.53            14.64
            12.82             9.36
            22.27            17.56
             4.93             6.21
            16.35            15.02
            13.41             8.51
            15.07             9.45
             6.04             6.54

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 7

     Slope Intercept Correlation Filename
     0.64  2.51      0.88        paleo_a.dat
     0.32  4.59      1.00        paleo_b.dat
     0.62  2.60      0.87      paleo_a_b.dat

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : [B[B2
Your selection : 2

Enter filename : paleo_a_b.dat
Enter a positive value : 1.0

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 7

     Slope Intercept Correlation Filename
     0.64  2.51      0.88        paleo_a.dat
     0.32  4.59      1.00        paleo_b.dat
     0.40  4.82      0.74      paleo_a_b.dat

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 4

Enter filename to be displayed : paleo_a_b.dat
Independent Value  Dependent Value
outliner     5.10             3.46
             4.60             6.53
outliner    12.98            14.15
outliner     7.90             5.32
            12.83            12.96
            16.41            13.08
             6.60             6.84
            10.00             9.12
             8.08            10.77
            15.67             9.25
outliner     4.53             4.11
             6.44             6.94
outliner    21.53            14.64
            12.82             9.36
outliner    22.27            17.56
             4.93             6.21
outliner    16.35            15.02
            13.41             8.51
            15.07             9.45
             6.04             6.54

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : [B[B8
Your selection : 8

Enter filename  to be removed : paleo_a.dat

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 8

Enter filename  to be removed : paleo_b.dat

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : 7

     Slope Intercept Correlation Filename
     0.40  4.82      0.74      paleo_a_b.dat

Choose one of the following options:
1 Load a data set from file
2 Exclude outlier points in a data set
3 Include outlier points in calculations
4 Display the data points for a data set
5 Combine two data sets
6 Compare two data sets
7 Display statistics for all data sets
8 Remove a data set from the list
0 Quit
Your selection : [B0
Your selection : 0

$ exit

Script command is complete on Mon Feb 28 16:15:11 EST 2005.